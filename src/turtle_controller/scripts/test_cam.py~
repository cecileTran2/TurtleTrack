#!/usr/bin/env python
# license removed for brevity
import rospy
import std_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
from turtlesim.msg import Pose
import sys
import time
import numpy as np
import math
import cv2

# global variables
#cv2.namedWindow('image')
[h,s,v] = [0,0,0]

def nothing(x):
    print(x)

def callback(ros_data):

    np_arr = np.fromstring(ros_data.data, np.uint8)
    image_np = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    h = cv2.getTrackbarPos('H', 'mask')
    s = cv2.getTrackbarPos('S', 'mask')
    v = cv2.getTrackbarPos('V', 'mask')
    print(h,s,v)
    hsv_color = cv2.cvtColor(image_np, cv2.COLOR_BGR2HSV)
    
    lower_range = np.array([140, 50, 50], dtype=np.uint8)
    upper_range = np.array([180, 255, 255], dtype=np.uint8)


    mask = cv2.inRange(hsv_color, lower_range, upper_range)
        
    #cv2.imshow('image',image_np)
    cv2.imshow('mask',mask)
 
    

if __name__ == '__main__':

    cv2.namedWindow('mask')
    cv2.createTrackbar('H','mask',h,179,nothing)
    cv2.createTrackbar('S','mask',s,255,nothing)
    cv2.createTrackbar('V','mask',v,255,nothing)
    cv2.waitKey(1000) # GUI needs time to launch...
    
    rospy.init_node('test_cam', anonymous=True)
    #msg = geometry_msgs.msg.Twist()

    #pub_cmd = rospy.Publisher('/turtle1/cmd_vel', geometry_msgs.msg.Twist, queue_size=10)
    rospy.Subscriber("/image_raw/compressed", sensor_msgs.msg.CompressedImage, callback)
    while not rospy.is_shutdown():
        cv2.waitKey(10)
